name: Build
on:
  # Trigger the workflow on pushes to only the 'master' branch (this avoids duplicate checks being run, e.g. for dependabot pull requests)
  push:
    branches: [ 'main' ]
    paths-ignore: [ '**.md', '.teamcity/**' ]
  # Trigger the workflow on any pull request
  pull_request:
    paths-ignore: [ '**.md', '.teamcity/**' ]


# TODO disabled for now
# This allows a subsequently queued workflow run to interrupt previous runs
#concurrency:
#  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
#  cancel-in-progress: true

jobs:

  gradleValidation:
    name: Gradle Validation
    uses: ./.github/workflows/reusable-gradleValidation.yml

  unitTests:
    name: Unit Tests
    needs: gradleValidation
    uses: ./.github/workflows/reusable-unitTests.yml

  integrationTests:
    name: Integration Tests
    needs: [ gradleValidation, unitTests ]
    uses: ./.github/workflows/reusable-integrationTests.yml

  #  integrationTestsEAP:
  #    name: Integration Tests EAP
  #    needs: gradleValidation
  #    uses: ./.github/workflows/reusable-integrationTests.yml
  #    with:
  #      platformVersion: 222-EAP-SNAPSHOT

  codeInspection:
    name: Code Inspection
    needs: integrationTests
    uses: ./.github/workflows/reusable-codeInspection.yml

  build:
    name: Build
    needs:
      - unitTests
    # - integrationTests
    # - integrationTestsEAP
    # - codeInspection
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.properties.outputs.changelog }}
    steps:

      - name: Fetch Sources
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-home-cache-cleanup: true

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          PROPERTIES="$(./gradlew properties --console=plain -q)"
          VERSION="$(echo "$PROPERTIES" | grep "^version:" | cut -f2- -d ' ')"
          NAME="$(echo "$PROPERTIES" | grep "^name:" | cut -f2- -d ' ')"
          ARTIFACT="$NAME-$VERSION.jar"
          CHANGELOG="$(./gradlew getChangelog --unreleased --no-header --console=plain -q)"
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "artifact=$ARTIFACT" >> $GITHUB_OUTPUT

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build Plugin
        run: ./gradlew build -x test

      # Store already-built plugin as an artifact for downloading
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.properties.outputs.artifact }}
          path: ./build/libs/${{ steps.properties.outputs.artifact }}

  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, release workflow would be triggered
  releaseDraft:
    name: Release Draft
    if: github.event_name != 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    steps:

      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v4

      # Remove old release drafts by using the curl request for the available releases with a draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | select(.tag_name | startswith("2")) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}

      # Create a new release draft which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create v${{ needs.build.outputs.version }} \
            --draft \
            --title "${{ needs.build.outputs.version }}" \
            --notes "$(cat << 'EOM'
          ${{ needs.build.outputs.changelog }}
          EOM
          )"
