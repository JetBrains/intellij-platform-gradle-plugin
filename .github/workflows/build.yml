name: Build
on:
  # Trigger the workflow on pushes to only the 'master' branch (this avoids duplicate checks being run, e.g., for dependabot pull requests)
  push:
    branches: [ 'main' ]
    paths-ignore: [ '**.md', '.teamcity/**' ]
  # Trigger the workflow on any pull request
  pull_request:
    paths-ignore: [ '**.md', '.teamcity/**' ]


# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:

  gradleValidation:
    name: Gradle Validation
    uses: ./.github/workflows/reusable-gradleValidation.yml

  unitTests:
    name: Unit Tests
    needs: gradleValidation
    uses: ./.github/workflows/reusable-unitTests.yml
    secrets: inherit
    permissions:
      checks: write

  integrationTests:
    name: Integration Tests
    needs: [ gradleValidation, unitTests ]
    uses: ./.github/workflows/reusable-integrationTests.yml
    secrets: inherit

  #  integrationTestsEAP:
  #    name: Integration Tests EAP
  #    needs: gradleValidation
  #    uses: ./.github/workflows/reusable-integrationTests.yml
  #    secrets: inherit
  #    with:
  #      platformVersion: 222-EAP-SNAPSHOT

  codeInspection:
    name: Code Inspection
    needs: integrationTests
    uses: ./.github/workflows/reusable-codeInspection.yml

  build:
    name: Build
    needs:
      - unitTests
    # - integrationTests
    # - integrationTestsEAP
    # - codeInspection
    runs-on: ubuntu-latest
    steps:

      - name: Fetch Sources
        uses: actions/checkout@v5

      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          distribution: zulu
          java-version: 21

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build Plugin
        env:
          DEVELOCITY_ACCESS_KEY: ${{ secrets.DEVELOCITY_ACCESS_KEY }}
        run: ./gradlew build -x test

      # Store an already-built plugin as an artifact for downloading
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: ./build/libs/

  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, the release workflow would be triggered
  releaseDraft:
    name: Release Draft
    if: github.event_name != 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:

      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v5

      # Remove old release drafts by using the curl request for the available releases with a draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | select(.tag_name | startswith("2")) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}

      # Create a new release draft which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION=$(./gradlew properties --property version --quiet --console=plain | tail -n 1 | cut -f2- -d ' ')
          RELEASE_NOTE="./build/tmp/release_note.txt"
          ./gradlew getChangelog --unreleased --no-header --quiet --console=plain --output-file=$RELEASE_NOTE
          
          gh release create $VERSION \
            --draft \
            --title $VERSION \
            --notes-file $RELEASE_NOTE
