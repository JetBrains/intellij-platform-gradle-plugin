name: Release

on:
  release:
    types: [prereleased, released]

jobs:

  # Prepare and publish the Gradle Plugins repository
  release:
    name: Release to Gradle Plugins
    runs-on: ubuntu-latest
    steps:

      # Check out the current repository
      - name: Fetch Sources
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 17

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-home-cache-cleanup: true
          cache-read-only: true

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          CHANGELOG="$(cat << 'EOM' | sed -e 's/^[[:space:]]*$//g' -e '/./,$!d'
          ${{ github.event.release.body }}
          EOM
          )"
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

#      # Update the Unreleased section with the current release note
#      - name: Patch Changelog
#        if: ${{ steps.properties.outputs.changelog != '' }}
#        env:
#          CHANGELOG: ${{ steps.properties.outputs.changelog }}
#        run: |
#          ./gradlew patchChangelog --release-note="$CHANGELOG"

      # Publish the plugin to the Gradle Plugins
      - name: Publish Plugin
        env:
          GRADLE_PUBLISH_KEY: ${{ secrets.GRADLE_PUBLISH_KEY }}
          GRADLE_PUBLISH_SECRET: ${{ secrets.GRADLE_PUBLISH_SECRET }}
        run: ./gradlew publishPlugins -Pgradle.publish.key=$GRADLE_PUBLISH_KEY -Pgradle.publish.secret=$GRADLE_PUBLISH_SECRET

      # Upload artifact as a release asset
      - name: Upload Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload ${{ github.event.release.tag_name }} ./build/libs/*

#      # Create pull request
#      - name: Create Pull Request
#        if: ${{ steps.properties.outputs.changelog != '' }}
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          VERSION="${{ github.event.release.tag_name }}"
#          BRANCH="changelog-update-$VERSION"
#          LABEL="release changelog"
#
#          git config user.email "action@github.com"
#          git config user.name "GitHub Action"
#
#          git checkout -b $BRANCH
#          git commit -am "Changelog update - $VERSION"
#          git push --set-upstream origin $BRANCH
#
#          gh label create "$LABEL" \
#            --description "Pull requests with release changelog update" \
#            || true
#
#          gh pr create \
#            --title "Changelog update - \`$VERSION\`" \
#            --body "Current pull request contains patched \`CHANGELOG.md\` file for the \`$VERSION\` version." \
#            --label "$LABEL" \
#            --head $BRANCH
